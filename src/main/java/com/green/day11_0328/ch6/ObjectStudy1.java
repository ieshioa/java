package com.green.day11_0328.ch6;

public class ObjectStudy1 {
    public static void main(String[] args) {
        /*
                oop(Objrct-Oriented Programming)
                프레임워크 / 라이브러리 : 내가 만든게 아니고 남이 만든걸 씀
                    자유도에 차이가 있음
                    프레임워크 : 주도권 프레임워크, 자체적으로 보안 o
                    라이브러리: 만들어 쓸 수 있음. 내 스타일대로. 주도권 나

              >  ㅈㅏ바의 특징
                    : os에 독립적 > JVM때문에 가능함 (JRE안에 포함되어있음)
                      객체지향언어
                      닷컴붐이 붙었을때 수혜
              >  객체지향 컨셉
                     : class, prototype
             >  class, 객체, instance 관계
                    클래스: 문서 - 실제로 메모리에 (램에) 올라가지 않은 문자열들의 조합,
                            무언갈 적어둔 종이(설계도),
                            객체를 만드는 설계도
                    객체 - 설계를 가지고 무언갈 만든다 . 실재
                            그 과정을 객체화 과정의 결과는 객체
                    인스턴스 - 객체와 비슷함
                    static 때문에 구분이 명확하지 않음
              > 객체의 구성요소 (속서(멤버필드), 메소드)
                    멤버필드 == 속성 == property == 멤버변수

                    (멤버)메소드 == 기능

                    예) TV
                    속성: 크기, 높이, 길이, 색상, 볼륨, 채널, 만든회사 등등
                    메소드: 켜기, 끄기, 볼륨올리기, 볼륨 낮추기, 채널 변경하기, 음소거 등등
            > 객체 생성 (인스턴스화, 객체화) 문법
                클래스명 변수명 = new 클래스명();
                new를 쓰지 않아도 되는것은 String밖에 없다 > 왜? 겁나 많이 쓰니까 풀어줌
                String str = "ddd";
                String str2 = new String("dddd");
                둘이 미묘한 차이는 있음 (저장위치가 다름)
                Tv tv = new Tv();
                () 생성자라고 부름
                객체를 생성할때 생성자를 호출해야한다.

                레퍼런스타입은 객체의 주소값을 저장함



         */
    }
}
